/* eslint-disable indent */
/* eslint-disable @typescript-eslint/no-explicit-any */
import React from 'react';
import type { NextPage, GetStaticPropsContext } from 'next';
import Head from 'next/head';
import { GetStaticProps, GetStaticPaths } from 'next';
import styled, { css } from 'styled-components';
import { QueryHeaderData } from '@services/header/header.service';
import { QueryExperienceSlugs, QueryExperiences } from '@services/experience/experience.service';
import { QuerySectionData } from '@services/section/section.service';
import { QueryFooterData } from '@services/footer/footer.service';
import { QueryScreenLinks } from '@services/screen/screen.service';
import { Header } from '@components/header';
import { Navigation } from '@components/navigation';
import { InlineMenu } from '@components/inline-menu';
import '@splidejs/react-splide/css';
import { MainCarousel } from '@components/carousel';
import { BackToTopButton, NextSectionButton } from '@components/buttons';
import { NavigationHelp } from '@components/navigation-help';
import { Collapsible } from '@components/collapsible';
import { Footer } from '@components/footer';
import {
  generateHeaderDropdown,
  generateNavigationItems,
  generateSlidesData,
  generateCarousels,
  generateFooterMenu,
  generateFooterSocial
} from '@services/page/page.service';

export const getStaticPaths: GetStaticPaths = async () => {
  const paths = await QueryExperienceSlugs();

  return {
    paths,
    fallback: false,
  };
};

export const getStaticProps: GetStaticProps = async (context: GetStaticPropsContext) => {
  const { params: { slug } }: any = context;
  const headerData = await QueryHeaderData();
  const experiencesData = await QueryExperiences();
  const sectionsData = await QuerySectionData(slug);
  const footerData = await QueryFooterData();
  let pageTitle = 'PSO';
  let activeTab = '';

  // Find page title by comparing page slug with all slugs.
  experiencesData.map((experience: any) => {
    if (experience.slug === slug) {
      pageTitle += ` | ${experience.title}`;
      activeTab = experience.title;
    }
  });

  const screensSlug: string[] = [];
  const sectionsId:string[] = [];

  // Generate an array of all screen slugs.
  (sectionsData as unknown as []).map((section: any) => {
    section?.leftScreenPickerCollection?.items.map((item: any) => screensSlug.push(item.slug));
    screensSlug.push(section?.middleScreenPicker?.slug);
    section?.rightScreenPickerCollection?.items.map((item: any) => screensSlug.push(item.slug));
    sectionsId.push(section.name);
  });
  
  const screensData: any[] = [];

  // Get all screens data.
  await Promise.all(screensSlug.map(async(element: any) => {
    const data = await QueryScreenLinks(element);
    screensData.push(data);
  }));
  
  return {
    props: {
      pageTitle: pageTitle || 'Novartis',
      activeTab: activeTab || null,
      header: headerData || null,
      experiences: experiencesData || null,
      sections: sectionsData || null,
      sectionsId,
      screens: screensData || null,
      footer: footerData || null,
    }, 
  };
};

const Page: NextPage = (props: any) => {
  const { pageTitle, activeTab, header, experiences, sections, screens, footer } = props;

  return (
    <StyleWrapper className='page'>
      <Head>
        <title>{pageTitle}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header
        logo={
          {
            imageSrc: header.logo.url,
            imageAlt: header.logo.title,
            imageLink: '/',
            leftText: header.primaryText.json.content[0].content[0].value,
            rightText: header.secondaryText.json.content[0].content[0].value,
          }
        }
        dropdown={
          {
            title: header.menuCollection.items[0].title,
            items: generateHeaderDropdown(header.menuCollection.items[0].itemsCollection.items),
          }
        }
      />

      <InlineMenu navLinks={
        {
          links: generateNavigationItems(experiences, activeTab)
        }
      }
      />

      <main className="main">
        <Navigation
          links={ generateNavigationItems(experiences, activeTab) }
        />

        <NavigationHelp />

        {
          sections.map((section: any, index: number) => {
            return (
              <div key={`section__${section.name}`}>
                <section id={section.name} key={index}>
                  {
                    section !== sections[0] && (
                      <BackToTopButton 
                        mobileVersion={true}
                        sectionTopId={ index > 0 ? sections[index - 1].name : null }
                      />
                    )
                  }
                  <InlineMenu navLinks={
                    {
                      links: generateNavigationItems(experiences, activeTab)
                    }
                  }
                  />

                  <MainCarousel
                    leftButtonLabel={section.leftGroupName}
                    rightButtonLabel={section.rightGroupName}
                    carousels={
                      generateCarousels(
                        generateSlidesData(section.leftScreenPickerCollection.items, screens),
                        generateSlidesData(section.middleScreenPicker, screens),
                        generateSlidesData(section.rightScreenPickerCollection.items, screens)
                      )
                    }
                  />
                </section>
                {
                  section !== sections[sections.length - 1] &&
                    <div className='next-section'>
                      <NextSectionButton sectionId={sections[index + 1].name} />
                    </div>
                }
              </div>
            );
          })
        }

        <BackToTopButton />

        <Collapsible 
          isiTitle={footer.isiTitle}
          isiTopText={
            {
              json: footer.isiTopText.json
            }
          }
          indicationTitle={footer.indicationsTitle}
          indicationText={
            {
              json: footer.indication.json
            }
          }
          isiBottomText={
            {
              json: footer.isiBottomText.json
            }
          }
        />
      </main>
      
      <Footer
        footerLinks={
          {
            firstLinksCollection: generateFooterMenu(footer.menuLinksCollection.items[0].itemsCollection.items),
            secondLinksCollection: generateFooterMenu(footer.menuLinksCollection.items[1].itemsCollection.items),
            thirdLinksCollection: generateFooterMenu(footer.menuLinksCollection.items[2].itemsCollection.items),
            fourthLinksCollection: generateFooterMenu(footer.menuLinksCollection.items[3].itemsCollection.items)
          }
        }
        socialLinks={ generateFooterSocial(footer.socialLinksCollection.items) }
        copyrightTerms={footer.termsConditions}
        copyrightImg={footer.footerLogoMedia.url}
        copyrightDisclaimer={footer.disclaimer}
      />
    </StyleWrapper>
  );
};

const PageStyles = css`
  &.page {
    background-color: var(--grey-100);
    position: relative;

    .splash {
      position: fixed;
      top: 0;
      left: 0;
    }
  }

  .navigation {
    display: none;

    @media (min-width: 992px) {
    display: flex;
    }
  }

  .inline-menu {
    .navigation{
      display: flex; 

      @media (min-width: 992px) {
        display: none;
    }
  }
}

  .next-section {
    margin-top: -72px;
    margin-bottom: 15px;

    @media (min-width: 992px) {
      margin-top: 25px;
      margin-bottom: 70px;
    }

  }

  .footer {
    margin-top: 70px;
  }
`;

const StyleWrapper = styled.article`
  ${PageStyles}
`;

export default Page;
